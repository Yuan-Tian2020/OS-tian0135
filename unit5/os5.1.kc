// XMega65 Kernal Development Template
// Each function of the kernal is a no-args function
// The functions are placed in the SYSCALLS table surrounded by JMP and NOP

#pragma cpu(rom6502)

import "string"

#pragma link("mega65hyper.ld")


const char* RASTER = 0xd012;
const char* VIC_MEMORY = 0xd018;
const char* SCREEN = 0x0400;
const char* BGCOL = 0xd021;
const char* COLS = 0xd800;
const char BLACK = 0;
const char BLUE = 6;
const char WHITE = 1;

char[] MESSAGE = "checkpoint 5.1 tian0135";

const unsigned char STATE_NOTRUNNING = $00;
const unsigned char STATE_RUNNING = $01;

// Process Descriptor Block definition
struct process_descriptor_block {
  // Unique identifier for the process
  //XXX - You need to add something here
  unsigned char process_id;
  
  // Current state of the process
  //XXX - You need to add something here
  unsigned char process_state;

  // Human readable name of the process
  //XXX - You need to add something here
  char* process_name;
  
  // Where this process is stored when not running
  // i.e., where in the $20000-$5FFFF memory range the
  // process is stored when not running.
  //XXX - You need to add something here
  //XXX - You need to add something here
  unsigned long storage_start_address;
  unsigned long storage_end_address;
 
  // Stored registers and related machine state for this
  // process (for the $D640-$D67E machine state registers)
  //XXX - You need to add something here
  unsigned char* stored_state;
  
};

// Process stored state will live at $C000-$C7FF, with 256 bytes
// for each process reserved
const unsigned char *stored_pdbs = $C000;
// 8 processes x 16 bytes = 128 bytes for names
const char *process_names = $C800;
// 8 processes x 64 bytes context state = 512 bytes
const unsigned char *process_context_states = $C900;


volatile unsigned char *current_screen_line = SCREEN;
volatile unsigned char current_screen_x = 0;

void print_char(char c)
{
   current_screen_line[current_screen_x++]=c;
}

void print_to_screen(char *message)
{
  char *c=message;
  while(*c) {
    current_screen_line[current_screen_x++]=*c;
    c++;
  }
}

void print_newline()
{
  current_screen_line+=40;
  current_screen_x=0;
}


void print_hex(unsigned word value)
{
  char[5] hex;
  unsigned char i;
  for(i=0;i<8;i++) {
    if (value<0xa000) hex[i]='0'+(char)(value>>12);
    else hex[i]=(char)(value>>12)-9;
    value<<=4;
  }
  hex[4]=0;
  print_to_screen(hex);
}

void print_dhex(unsigned dword value)
{
  print_hex((word)(value>>16));
  print_hex((unsigned word)value);
}

void describe_pdb(unsigned char pdb_number)
{
  unsigned char i;
  struct process_descriptor_block *p
    =(struct process_descriptor_block *)(((unsigned short)stored_pdbs)+(((unsigned short)pdb_number)<<8));

  print_to_screen("pdb#");
  print_hex((word)pdb_number);
  print_to_screen(":");
  print_newline();

  print_to_screen("  pid:          ");
  print_hex((word)p->process_id);
  print_newline();

  print_to_screen("  process name: ");
  char *n=p->process_name;
  for(i=0;n[i]&&(i<17);i++) {
    print_char(n[i]);
  }
  print_newline();

  print_to_screen("  mem start:    $");
  print_dhex(p->storage_start_address);
  print_newline();

  print_to_screen("  mem end:      $");
  print_dhex(p->storage_end_address);
  print_newline();

  print_to_screen("  pc:           $");
  unsigned short *ss=p->stored_state;
  print_hex(ss[4]);
  print_newline();


}

//XXX - Copy in your syscalls, RESET() function and entry point tables from checkpoint3.1

void exit_hypervisor (){
       *(unsigned char *)$D67F = $01;
       }
void syscall00() {
exit_hypervisor();

}
void syscall01() {
exit_hypervisor();

}

void syscall02() {
exit_hypervisor();

}

void syscall03() {
exit_hypervisor();

}

void syscall04() { 
exit_hypervisor();
}

void syscall05() { 
exit_hypervisor();
}

void syscall06() { 
exit_hypervisor();
}
void syscall07() { 
exit_hypervisor();
}
void syscall08() { 
exit_hypervisor();
}
void syscall09() { 
exit_hypervisor();
}
void syscall0A() { 
exit_hypervisor();
}
void syscall0B() { 
exit_hypervisor();
}
void syscall0C() { 
exit_hypervisor();
}
void syscall0D() { 
exit_hypervisor();
}
void syscall0E() { 
exit_hypervisor();
}
void syscall0F() { 
exit_hypervisor();
}
void syscall10() { 
exit_hypervisor();
}
void securentr() { 
exit_hypervisor();
}
void securexit() { 
exit_hypervisor();
}
void syscall13() { 
exit_hypervisor();
}
void syscall14() { 
exit_hypervisor();
}
void syscall15() { 
exit_hypervisor();
}
void syscall16() { 
exit_hypervisor();
}
void syscall17() { 
exit_hypervisor();
}
void syscall18() { 
exit_hypervisor();
}
void syscall19() { 
exit_hypervisor();
}
void syscall1A() { 
exit_hypervisor();
}
void syscall1B() { 
exit_hypervisor();
}
void syscall1C() { 
exit_hypervisor();
}
void syscall1D() { 
exit_hypervisor();
}
void syscall1E() { 
exit_hypervisor();
}
void syscall1F() { 
exit_hypervisor();
}
void syscall20() { 
exit_hypervisor();
}
void syscall21() { 
exit_hypervisor();
}
void syscall22() { 
exit_hypervisor();
}
void syscall23() { 
exit_hypervisor();
}
void syscall24() { 
exit_hypervisor();
}
void syscall25() { 
exit_hypervisor();
}
void syscall26() { 
exit_hypervisor();
}
void syscall27() { 
exit_hypervisor();
}
void syscall28() { 
exit_hypervisor();
}
void syscall29() { 
exit_hypervisor();
}
void syscall2A() { 
exit_hypervisor();
}
void syscall2B() { 
exit_hypervisor();
}
void syscall2C() { 
exit_hypervisor();
}
void syscall2D() { 
exit_hypervisor();
}
void syscall2E() { 
exit_hypervisor();
}
void syscall2F() { 
exit_hypervisor();
}
void syscall30() { 
exit_hypervisor();
}
void syscall31() { 
exit_hypervisor();
}
void syscall32() { 
exit_hypervisor();
}
void syscall33() { 
exit_hypervisor();
}
void syscall34() { 
exit_hypervisor();
}
void syscall35() { 
exit_hypervisor();
}
void syscall36() { 
exit_hypervisor();
}
void syscall37() { 
exit_hypervisor();
}
void syscall38() { 
exit_hypervisor();
}
void syscall39() { 
exit_hypervisor();
}
void syscall3A() { 
exit_hypervisor();
}
void syscall3B() { 
exit_hypervisor();
}
void syscall3C() { 
exit_hypervisor();
}
void syscall3D() { 
exit_hypervisor();
}
void syscall3E() { 
exit_hypervisor();
}
void syscall3F() { 
exit_hypervisor();
}

void reset() {
    *VIC_MEMORY = 0x14;
    memset(SCREEN, ' ',40*25);
    memset(COLS, WHITE, 40*25);
    char* sc = SCREEN+40;
    char* message = MESSAGE;
    while (*message){
      *sc++ = *message++;
      }
    
    current_screen_line = SCREEN;
    print_newline();
 
    print_newline();
    print_newline();
    
    describe_pdb(0);
    
    
    while(true){
    if(*RASTER==54 || *RASTER == 66){
    *BGCOL = WHITE;
    }else{
    *BGCOL = BLUE;
    }
    }
    }
      
      
   
 
   
    

void main(){
}

void pagfault() { 
exit_hypervisor();
}
void restorkey() { 
exit_hypervisor();
}
void alttabkey() { 
exit_hypervisor();
}
void vf011rd() { 
exit_hypervisor();
}
void vf011wr() { 
exit_hypervisor();
}
void undefined_trap() { 
exit_hypervisor();
}

void cpu_kill() { 
exit_hypervisor();
}


#pragma data_seg(Syscall)

struct SysCall{
    char xjmp;         
    void()* syscall;   
    char xnop;         
};

const char JMP = 0x4c;
const char NOP = 0xea;


export struct SysCall[] SYSCALLS = {


    { JMP, &syscall00, NOP },
    { JMP, &syscall01, NOP },
    { JMP, &syscall02, NOP },
    { JMP, &syscall03, NOP },
    { JMP, &syscall04, NOP },
    { JMP, &syscall05, NOP },
    { JMP, &syscall06, NOP },
    { JMP, &syscall07, NOP },
    { JMP, &syscall08, NOP },
    { JMP, &syscall09, NOP },
    { JMP, &syscall0A, NOP },
    { JMP, &syscall0B, NOP },
    { JMP, &syscall0C, NOP },
    { JMP, &syscall0D, NOP },
    { JMP, &syscall0E, NOP },
    { JMP, &syscall0F, NOP },
    { JMP, &syscall10, NOP },
    { JMP, &securentr, NOP },
    { JMP, &securexit, NOP },
    { JMP, &syscall13, NOP },
    { JMP, &syscall14, NOP },
    { JMP, &syscall15, NOP },
    { JMP, &syscall16, NOP },
    { JMP, &syscall17, NOP },
    { JMP, &syscall18, NOP },
    { JMP, &syscall19, NOP },
    { JMP, &syscall1A, NOP },
    { JMP, &syscall1B, NOP },
    { JMP, &syscall1C, NOP },
    { JMP, &syscall1D, NOP },
    { JMP, &syscall1E, NOP },
    { JMP, &syscall1F, NOP },
    { JMP, &syscall20, NOP },
    { JMP, &syscall21, NOP },
    { JMP, &syscall22, NOP },
    { JMP, &syscall23, NOP },
    { JMP, &syscall24, NOP },
    { JMP, &syscall25, NOP },
    { JMP, &syscall26, NOP },
    { JMP, &syscall27, NOP },
    { JMP, &syscall28, NOP },
    { JMP, &syscall29, NOP },
    { JMP, &syscall2A, NOP },
    { JMP, &syscall2B, NOP },
    { JMP, &syscall2C, NOP },
    { JMP, &syscall2D, NOP },
    { JMP, &syscall2E, NOP },
    { JMP, &syscall2F, NOP },
    { JMP, &syscall30, NOP },
    { JMP, &syscall31, NOP },
    { JMP, &syscall32, NOP },
    { JMP, &syscall33, NOP },
    { JMP, &syscall34, NOP },
    { JMP, &syscall35, NOP },
    { JMP, &syscall36, NOP },
    { JMP, &syscall37, NOP },
    { JMP, &syscall38, NOP },
    { JMP, &syscall39, NOP },
    { JMP, &syscall3A, NOP },
    { JMP, &syscall3B, NOP },
    { JMP, &syscall3C, NOP },
    { JMP, &syscall3D, NOP },
    { JMP, &syscall3E, NOP },
    { JMP, &syscall3F, NOP } 
    };
   

export align(0x100) struct SysCall[] SYSCALL_TRAPS = {
    { JMP, &reset, NOP },  //1
    { JMP, &pagfault, NOP },  //2
    { JMP, &restorkey, NOP },  //3
    { JMP, &alttabkey, NOP },  //4
    { JMP, &vf011rd, NOP },  //5t
    { JMP, &vf011wr, NOP },  //6
    { JMP, &undefined_trap, NOP },  //7
    { JMP, &undefined_trap, NOP },  //8
    { JMP, &undefined_trap, NOP },  //9
    { JMP, &undefined_trap, NOP },  //10
    { JMP, &undefined_trap, NOP },  //11
    { JMP, &undefined_trap, NOP },  //12
    { JMP, &undefined_trap, NOP },  //13
    { JMP, &undefined_trap, NOP },  //14
    { JMP, &undefined_trap, NOP },  //15
    { JMP, &undefined_trap, NOP },  //16
    { JMP, &undefined_trap, NOP },  //17
    { JMP, &undefined_trap, NOP },  //18
    { JMP, &undefined_trap, NOP },  //19
    { JMP, &undefined_trap, NOP },  //20
    { JMP, &undefined_trap, NOP },  //21
    { JMP, &undefined_trap, NOP },  //22
    { JMP, &undefined_trap, NOP },  //23
    { JMP, &undefined_trap, NOP },  //24
    { JMP, &undefined_trap, NOP },  //25
    { JMP, &undefined_trap, NOP },  //26
    { JMP, &undefined_trap, NOP },  //27
    { JMP, &undefined_trap, NOP },  //28
    { JMP, &undefined_trap, NOP },  //29
    { JMP, &undefined_trap, NOP },  //30
    { JMP, &undefined_trap, NOP },  //31
    { JMP, &undefined_trap, NOP },  //32
    { JMP, &undefined_trap, NOP },  //33
    { JMP, &undefined_trap, NOP },  //34
    { JMP, &undefined_trap, NOP },  //35
    { JMP, &undefined_trap, NOP },  //36
    { JMP, &undefined_trap, NOP },  //37
    { JMP, &undefined_trap, NOP },  //38
    { JMP, &undefined_trap, NOP },  //39
    { JMP, &undefined_trap, NOP },  //40
    { JMP, &undefined_trap, NOP },  //41
    { JMP, &undefined_trap, NOP },  //42
    { JMP, &undefined_trap, NOP },  //43
    { JMP, &undefined_trap, NOP },  //44
    { JMP, &undefined_trap, NOP },  //45
    { JMP, &undefined_trap, NOP },  //46
    { JMP, &undefined_trap, NOP },  //47
    { JMP, &cpu_kill, NOP }   //48
    
};

