

import "string"
#pragma link("mega65hyper.ld")


const char* RASTER = 0xd012;
const char* VIC_MEMORY = 0xd018;
const char* SCREEN = 0x0400;
const char* BGCOL = 0xd021;
const char* COLS = 0xd800;
const char BLACK = 0;
const char WHITE = 1;

char* MESSAGE = "checkpoint3.2 by tian0135";

unsigned char *current_screen_line = $0400;
unsigned char current_screen_x = 0;

unsigned short mem_start = $0800;
unsigned short mem_end = $8000;
volatile unsigned char *p;
bool is_mem_error = false;


//Some text to display

void print_to_screen(char *message){
        while (*message){
        *(current_screen_line + current_screen_x) = *message++;
        current_screen_x++;
        }
}
void print_newline(){
  current_screen_line += 40;
  current_screen_x=0;
}

void print_raster_lines (){
while(true) {
        if(*RASTER==54 || *RASTER==66) {
            *BGCOL = WHITE;
        } else {
            *BGCOL = BLACK;
        }
     }
}

void print_hex (unsigned short value){
       char[5]hex;
       unsigned char i;
       for (i=0; i<4; i++){
                if (value < 0xa000) hex[i] = '0' + (char) (value >> 12);
                else hex[i] = (char) (value >> 12) - 9;
                value <<= 4;
       }
       hex[4] =0;
       print_to_screen(hex);
}
   
void text_memory (){
        for (mem_start; mem_start < $7fff; mem_start++){
            
               for (char value = 0;value <255; value++) {
                   if(!is_mem_error){
                      *p =value; }
                      
                      if (*p != value) {
                           is_mem_error = true;
                           break;
                      }
                }
                if (is_mem_error) {
                    mem_end = (unsigned short) p;
                    break;
                }
          }
          print_newline ();
          print_to_screen ("memory found at $");
          print_hex(mem_start);
          print_to_screen(" - $");
          print_hex (mem_end);
          print_newline ();
          print_to_screen ("finished testing hardware");
}

      
// Here are a couple sample SYSCALL handlers that just display a character on the screen

void main(){
}
void exit_hypervisor (){
       *(unsigned char *)$D67F = $01;
       }
       
void syscall01() {
    *(SCREEN+79) = '}';
}

void syscall02() {
    *(SCREEN+78) = '{';
}

void syscall03() {
exit_hypervisor();

}

void syscall04() { 
exit_hypervisor();
}

void syscall05() { 
exit_hypervisor();
}

void syscall06() { 
exit_hypervisor();
}
void syscall07() { 
exit_hypervisor();
}
void syscall08() { 
exit_hypervisor();
}
void syscall09() { 
exit_hypervisor();
}
void syscall0A() { 
exit_hypervisor();
}
void syscall0B() { 
exit_hypervisor();
}
void syscall0C() { 
exit_hypervisor();
}
void syscall0D() { 
exit_hypervisor();
}
void syscall0E() { 
exit_hypervisor();
}
void syscall0F() { 
exit_hypervisor();
}
void syscall10() { 
exit_hypervisor();
}
void securentr() { 
exit_hypervisor();
}
void securexit() { 
exit_hypervisor();
}
void syscall13() { 
exit_hypervisor();
}
void syscall14() { 
exit_hypervisor();
}
void syscall15() { 
exit_hypervisor();
}
void syscall16() { 
exit_hypervisor();
}
void syscall17() { 
exit_hypervisor();
}
void syscall18() { 
exit_hypervisor();
}
void syscall19() { 
exit_hypervisor();
}
void syscall1A() { 
exit_hypervisor();
}
void syscall1B() { 
exit_hypervisor();
}
void syscall1C() { 
exit_hypervisor();
}
void syscall1D() { 
exit_hypervisor();
}
void syscall1E() { 
exit_hypervisor();
}
void syscall1F() { 
exit_hypervisor();
}
void syscall20() { 
exit_hypervisor();
}
void syscall21() { 
exit_hypervisor();
}
void syscall22() { 
exit_hypervisor();
}
void syscall23() { 
exit_hypervisor();
}
void syscall24() { 
exit_hypervisor();
}
void syscall25() { 
exit_hypervisor();
}
void syscall26() { 
exit_hypervisor();
}
void syscall27() { 
exit_hypervisor();
}
void syscall28() { 
exit_hypervisor();
}
void syscall29() { 
exit_hypervisor();
}
void syscall2A() { 
exit_hypervisor();
}
void syscall2B() { 
exit_hypervisor();
}
void syscall2C() { 
exit_hypervisor();
}
void syscall2D() { 
exit_hypervisor();
}
void syscall2E() { 
exit_hypervisor();
}
void syscall2F() { 
exit_hypervisor();
}
void syscall30() { 
exit_hypervisor();
}
void syscall31() { 
exit_hypervisor();
}
void syscall32() { 
exit_hypervisor();
}
void syscall33() { 
exit_hypervisor();
}
void syscall34() { 
exit_hypervisor();
}
void syscall35() { 
exit_hypervisor();
}
void syscall36() { 
exit_hypervisor();
}
void syscall37() { 
exit_hypervisor();
}
void syscall38() { 
exit_hypervisor();
}
void syscall39() { 
exit_hypervisor();
}
void syscall3A() { 
exit_hypervisor();
}
void syscall3B() { 
exit_hypervisor();
}
void syscall3C() { 
exit_hypervisor();
}
void syscall3D() { 
exit_hypervisor();
}
void syscall3E() { 
exit_hypervisor();
}
void syscall3F() { 
exit_hypervisor();
}

void reset() {
    *VIC_MEMORY = 0x14;
    memset(SCREEN, ' ',40*25);
    memset(COLS, WHITE, 40*25);
    
    print_to_screen("tian0135 operating system starting...");
    print_newline();
    print_to_screen("testing hardware");
    
  

    exit_hypervisor();
}

void pagfault() { 
exit_hypervisor();
}
void restorkey() { 
exit_hypervisor();
}
void alttabkey() { 
exit_hypervisor();
}
void vf011rd() { 
exit_hypervisor();
}
void vf011wr() { 
exit_hypervisor();
}
void undefined_trap() { 
exit_hypervisor();
}

void cpu_kill() { 
exit_hypervisor();
}


#pragma data_seg(Syscall)

struct SysCall{
    char xjmp;         // Holds $4C, the JMP $nnn opcode
    void()* syscall;   // Holds handler address, will be the target of the JMP
    char xnop;         // Holds $EA, the NOP opcode
};

const char JMP = 0x4c;
const char NOP = 0xea;


export struct SysCall[] SYSCALLS = {


    
    { JMP, &syscall01, NOP },
    { JMP, &syscall02, NOP },
    { JMP, &syscall03, NOP },
    { JMP, &syscall04, NOP },
    { JMP, &syscall05, NOP },
    { JMP, &syscall06, NOP },
    { JMP, &syscall07, NOP },
    { JMP, &syscall08, NOP },
    { JMP, &syscall09, NOP },
    { JMP, &syscall0A, NOP },
    { JMP, &syscall0B, NOP },
    { JMP, &syscall0C, NOP },
    { JMP, &syscall0D, NOP },
    { JMP, &syscall0E, NOP },
    { JMP, &syscall0F, NOP },
    { JMP, &syscall10, NOP },
    { JMP, &securentr, NOP },
    { JMP, &securexit, NOP },
    { JMP, &syscall13, NOP },
    { JMP, &syscall14, NOP },
    { JMP, &syscall15, NOP },
    { JMP, &syscall16, NOP },
    { JMP, &syscall17, NOP },
    { JMP, &syscall18, NOP },
    { JMP, &syscall19, NOP },
    { JMP, &syscall1A, NOP },
    { JMP, &syscall1B, NOP },
    { JMP, &syscall1C, NOP },
    { JMP, &syscall1D, NOP },
    { JMP, &syscall1E, NOP },
    { JMP, &syscall1F, NOP },
    { JMP, &syscall20, NOP },
    { JMP, &syscall21, NOP },
    { JMP, &syscall22, NOP },
    { JMP, &syscall23, NOP },
    { JMP, &syscall24, NOP },
    { JMP, &syscall25, NOP },
    { JMP, &syscall26, NOP },
    { JMP, &syscall27, NOP },
    { JMP, &syscall28, NOP },
    { JMP, &syscall29, NOP },
    { JMP, &syscall2A, NOP },
    { JMP, &syscall2B, NOP },
    { JMP, &syscall2C, NOP },
    { JMP, &syscall2D, NOP },
    { JMP, &syscall2E, NOP },
    { JMP, &syscall2F, NOP },
    { JMP, &syscall30, NOP },
    { JMP, &syscall31, NOP },
    { JMP, &syscall32, NOP },
    { JMP, &syscall33, NOP },
    { JMP, &syscall34, NOP },
    { JMP, &syscall35, NOP },
    { JMP, &syscall36, NOP },
    { JMP, &syscall37, NOP },
    { JMP, &syscall38, NOP },
    { JMP, &syscall39, NOP },
    { JMP, &syscall3A, NOP },
    { JMP, &syscall3B, NOP },
    { JMP, &syscall3C, NOP },
    { JMP, &syscall3D, NOP },
    { JMP, &syscall3E, NOP },
    { JMP, &syscall3F, NOP } 
    };
   
// In this example we had only two SYSCALLs defined, so rather than having
// another 62 lines, we can just ask KickC to make the TRAP table begin
// at the next multiple of $100, i.e., at $8100.
export align(0x100) struct SysCall[] SYSCALL_TRAPS = {
    { JMP, &reset, NOP },  //1
    { JMP, &pagfault, NOP },  //2
    { JMP, &restorkey, NOP },  //3
    { JMP, &alttabkey, NOP },  //4
    { JMP, &vf011rd, NOP },  //5t
    { JMP, &vf011wr, NOP },  //6
    { JMP, &undefined_trap, NOP },  //7
    { JMP, &undefined_trap, NOP },  //8
    { JMP, &undefined_trap, NOP },  //9
    { JMP, &undefined_trap, NOP },  //10
    { JMP, &undefined_trap, NOP },  //11
    { JMP, &undefined_trap, NOP },  //12
    { JMP, &undefined_trap, NOP },  //13
    { JMP, &undefined_trap, NOP },  //14
    { JMP, &undefined_trap, NOP },  //15
    { JMP, &undefined_trap, NOP },  //16
    { JMP, &undefined_trap, NOP },  //17
    { JMP, &undefined_trap, NOP },  //18
    { JMP, &undefined_trap, NOP },  //19
    { JMP, &undefined_trap, NOP },  //20
    { JMP, &undefined_trap, NOP },  //21
    { JMP, &undefined_trap, NOP },  //22
    { JMP, &undefined_trap, NOP },  //23
    { JMP, &undefined_trap, NOP },  //24
    { JMP, &undefined_trap, NOP },  //25
    { JMP, &undefined_trap, NOP },  //26
    { JMP, &undefined_trap, NOP },  //27
    { JMP, &undefined_trap, NOP },  //28
    { JMP, &undefined_trap, NOP },  //29
    { JMP, &undefined_trap, NOP },  //30
    { JMP, &undefined_trap, NOP },  //31
    { JMP, &undefined_trap, NOP },  //32
    { JMP, &undefined_trap, NOP },  //33
    { JMP, &undefined_trap, NOP },  //34
    { JMP, &undefined_trap, NOP },  //35
    { JMP, &undefined_trap, NOP },  //36
    { JMP, &undefined_trap, NOP },  //37
    { JMP, &undefined_trap, NOP },  //38
    { JMP, &undefined_trap, NOP },  //39
    { JMP, &undefined_trap, NOP },  //40
    { JMP, &undefined_trap, NOP },  //41
    { JMP, &undefined_trap, NOP },  //42
    { JMP, &undefined_trap, NOP },  //43
    { JMP, &undefined_trap, NOP },  //44
    { JMP, &undefined_trap, NOP },  //45
    { JMP, &undefined_trap, NOP },  //46
    { JMP, &undefined_trap, NOP },  //47
    { JMP, &cpu_kill, NOP }   //48
    
};

    